# region imports
from AlgorithmImports import *
# endregion

class pairs(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.name = str(a) + ':' + str(b)
        self.df = pd.concat([a.df,b.df],axis = 1).dropna()
    # The number of bars in the rolling window would be determined by the resolution, so we get this
        # information from the shape of the DataFrame here.
        self.num_bar = self.df.shape[0]
        self.cor = self.df.corr().ix[0][1]
    # Set the initial signals to be 0
        self.error = 0
        self.last_error = 0
        self.a_price = []
        self.a_date = []
        self.b_price = []
        self.b_date = []

    def cor_update(self):
        self.cor = self.df.corr().ix[0][1]

    def cointegration_test(self):
        self.model = sm.ols(formula = '%s ~ %s'%(str(self.a),str(self.b)), data = self.df).fit()
    # This line conduct ADF test on the residual. ts.adfuller() returns a tuple and the first element in
     # the tuple is the test value.
        self.adf = ts.adfuller(self.model.resid,autolag = 'BIC')[0]
        self.mean_error = np.mean(self.model.resid)
        self.sd = np.std(self.model.resid)

    def price_record(self,data_a,data_b):
        self.a_price.append(float(data_a.Close))
        self.a_date.append(data_a.EndTime)
        self.b_price.append(float(data_b.Close))
        self.b_date.append(data_b.EndTime)

    def df_update(self):
        new_df = pd.DataFrame({str(self.a):self.a_price,str(self.b):self.b_price},index =
                 [self.a_date]).dropna()
        self.df = pd.concat([self.df,new_df])
        self.df = self.df.tail(self.num_bar)
    # after updating the DataFrame, we empty the lists for the incoming data
        for list in [self.a_price,self.a_date,self.b_price,self.b_date]:
            list = []

    def generate_pairs(self):
        for i in range(len(self.symbols)):
            for j in range(i+1,len(self.symbols)):
                self.pair_list.append(pairs(self.symbols[i],self.symbols[j]))

        self.pair_list = [x for x in self.pair_list if x.cor > self.pair_threshold]
        self.pair_list.sort(key = lambda x: x.cor, reverse = True)

        if len(self.pair_list) > self.pair_num:
        	    self.pair_list = self.pair_list[:self.pair_num]

    def pair_clean(self,list):
        l = []
        l.append(list[0])
        for i in list:
            symbols = [x.a for x in l] + [x.b for x in l]
            if i.a not in symbols and i.b not in symbols:
                l.append(i)
            else:
                pass
        return l

    def OnData(self):
        if len(self.symbols[0].prices) < self.num_bar:
          for symbol in self.symbols:
             if data.ContainsKey(i) is True:
    	         symbol.prices.append(float(data[symbol].Close))
                 symbol.dates.append(data[symbol].EndTime)
             else:
                 self.Log('%s is missing'%str(symbol))
                 self.symbols.remove(symbol)
             self.data_count = 0
        return
        if self.count == 0 and len(self.symbols[0].prices) == self.num_bar:
            if self.generate_count == 0:
               for symbol in self.symbols:
                  symbol.df = pd.DataFrame(symbol.prices, index = symbol.dates, columns = ['%s'%str(symbol)])

            self.generate_pairs()
            self.generate_count +=1
            self.Log('pair list length:'+str(len(self.pair_list)))

            for pair in self.pair_list:
                pair.cor_update()
           # Update the DataFrame and correlation selection
        if len(self.pair_list[0].a_price) != 0:
            for pair in self.pair_list:
    	        pair.df_update()
                pair.cor_update()

        self.selected_pair = [x for x in self.pair_list if x.cor > 0.9]
        # Cointegration test
        for pair in self.selected_pair:
            pair.cointegration_test()

        self.selected_pair = [x for x in self.selected_pair if x.adf < self.BIC]
        self.selected_pair.sort(key = lambda x: x.adf)
        # If no pair passed the two-stage test, return.
        if len(self.selected_pair) == 0:
            self.Log('no selected pair')
            self.count += 1
            return
        # clean the pair to avoid overlapping stocks.
        self.selected_pair = self.pair_clean(self.selected_pair)
        # assign a property to the selected pair, this is a signal that would be used for trading.
        for pair in self.selected_pair:
            pair.touch = 0
            self.Log(str(pair.adf) + pair.name)
        # limit the number of selected pairs.
        if len(self.selected_pair) > self.selected_num:
            self.selected_pair = self.selected_pair[:self.selected_num]

        self.count +=1
        self.data_count = 0
        return

        num_select = len(self.selected_pair)
        for pair in self.pair_list:
          if data.ContainsKey(pair.a) is True and data.ContainsKey(pair.b) is True:
            i.price_record(data[i.a],data[i.b])
          else:
            self.Log('%s has no data'%str(pair.name))
            self.pair_list.remove(pair)

        for pair in self.selected_pair:
            pair.last_error = pair.error

        for pair in self.trading_pairs:
            pair.last_error = pair.error

        for i in self.selected_pair:
          price_a = float(data[i.a].Close)
          price_b = float(data[i.b].Close)
          i.error = price_a - (i.model.params[0] + i.model.params[1]*price_b)
          if (self.Portfolio[i.a].Quantity == 0 and self.Portfolio[i.b].Quantity == 0) and i not in self.trading_pairs:
               if i.touch == 0:
                if i.error < i.mean_error - self.open_size*i.sd and i.last_error > i.mean_error - self.open_size*i.sd:
                    i.touch += -1
                elif i.error > i.mean_error + self.open_size*i.sd and i.last_error < i.mean_error + self.open_size*i.sd: i.touch += 1 else: pass elif i.touch == -1: if i.error > i.mean_error - self.open_size*i.sd and i.last_error < i.mean_error - self.open_size*i.sd:
                    self.Log('long %s and short %s'%(str(i.a),str(i.b)))
                    i.record_model = i.model
                    i.record_mean_error = i.mean_error
                    i.record_sd = i.sd
                    self.trading_pairs.append(i)
                    self.SetHoldings(i.a, 5.0/(len(self.selected_pair)))
                    self.SetHoldings(i.b, -5.0/(len(self.selected_pair)))
                    i.touch = 0
                elif i.touch == 1:
                    if i.error < i.mean_error + self.open_size*i.sd and i.last_error > i.mean_error + self.open_size*i.sd:
                      self.Log('long %s and short %s'%(str(i.b),str(i.a)))
                      i.record_model = i.model
                      i.record_mean_error = i.mean_error
                      i.record_sd = i.sd
                      self.trading_pairs.append(i)
                      self.SetHoldings(i.b, 5.0/(len(self.selected_pair)))
                      self.SetHoldings(i.a, -5.0/(len(self.selected_pair)))
                      i.touch = 0
                else:
                   pass
        else:
           pass